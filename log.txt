diff -r ./src/app/Annonce/annonce.service.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/annonce.service.spec.ts
1,12c1,12
< import { TestBed } from '@angular/core/testing';
< 
< import { AnnonceService } from './annonce.service';
< 
< describe('AnnonceService', () => {
<   beforeEach(() => TestBed.configureTestingModule({}));
< 
<   it('should be created', () => {
<     const service: AnnonceService = TestBed.get(AnnonceService);
<     expect(service).toBeTruthy();
<   });
< });
---
> import { TestBed } from '@angular/core/testing';
> 
> import { AnnonceService } from './annonce.service';
> 
> describe('AnnonceService', () => {
>   beforeEach(() => TestBed.configureTestingModule({}));
> 
>   it('should be created', () => {
>     const service: AnnonceService = TestBed.get(AnnonceService);
>     expect(service).toBeTruthy();
>   });
> });
diff -r ./src/app/Annonce/annonce.service.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/annonce.service.ts
1,364c1,364
< import {Injectable} from '@angular/core';
< import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';
< import {Annonce} from './annonce';
< import {FormGroup} from '@angular/forms';
< import {GlobalConfig} from '../global-config';
< import {Router} from "@angular/router";
< import {Image} from "./image";
< import {AuthStorageService} from "./auth-storage.service";
< 
< @Injectable({
<   providedIn: 'root'
< })
< export class AnnonceService {
< 
<   annonces: Annonce[];
<   /*annonces: Annonce[] = [
<     {
<       id: 1,
<       price: 1100,
<       stage: 2,
<       make : 'BMW',
<       model : 'X5',
<       year: '2005',
<       mileage: 14000,
<       category: 'break',
<       energy: 'essence',
<       localisation: 'paris',
<       numberOfSeats: 4,
<       options: '',
<       dumpValve: '',
<       airAdmission: '',
<       turbo: '',
<       exaust: '',
<       torqueSinceTheLatestModification: 45,
<       torque: 34,
<       driveType: '',
<       trim: '',
<       airFilter: '',
<       publishedDate: '',
<       highPerformanceTuningCompany: '',
<       intercooler: '',
<       inSideColor: 'gray',
<       co2: 120,
<       euroNorme: 'Eruro 5',
<       firstHand: true,
<       outSideColor: 'red',
<       fuelEconomySinceTheLatestModification: '',
<       fuelEconomy: '',
<       mileageSince1stModification: null,
<       fiscalHorsePower: 43,
<       horsePowerSinceTheLatestModification: 45,
<       horsePower: 567,
<       reinforcedCluth: false,
<       numberOfDoor: 3,
<       gearbox: 'manuelle',
<       maxSpeed: 450,
<       images: [{
<         id: 4,
<         path: 'https://www.automobile-propre.com/wp-content/uploads/2020/01/sony-vision-s-01.jpg'
<       }]
<     },{
<       id: 2,
<       price: 400,
<       stage: 2,
<       make : 'BMW',
<       model : 'X5',
<       year: '2005',
<       mileage: 14000,
<       category: 'break',
<       energy: 'essence',
<       localisation: 'paris',
<       numberOfSeats: 4,
<       options: '',
<       dumpValve: '',
<       airAdmission: '',
<       turbo: '',
<       exaust: '',
<       torqueSinceTheLatestModification: 45,
<       torque: 34,
<       driveType: '',
<       trim: '',
<       airFilter: '',
<       publishedDate: '',
<       highPerformanceTuningCompany: '',
<       intercooler: '',
<       inSideColor: 'gray',
<       co2: 120,
<       euroNorme: 'Eruro 5',
<       firstHand: true,
<       outSideColor: 'red',
<       fuelEconomySinceTheLatestModification: '',
<       fuelEconomy: '',
<       mileageSince1stModification: null,
<       fiscalHorsePower: 43,
<       horsePowerSinceTheLatestModification: 45,
<       horsePower: 567,
<       reinforcedCluth: false,
<       numberOfDoor: 3,
<       gearbox: 'manuelle',
<       maxSpeed: 450,
<       images: [{
<         id: 1,
<         path: 'https://www.automobile-propre.com/wp-content/uploads/2020/01/sony-vision-s-01.jpg'
<       }]
<     },{
<       id: 3,
<       price: 900,
<       stage: 2,
<       make : 'BMW',
<       model : 'X5',
<       year: '2005',
<       mileage: 14000,
<       category: 'break',
<       energy: 'essence',
<       localisation: 'paris',
<       numberOfSeats: 4,
<       options: '',
<       dumpValve: '',
<       airAdmission: '',
<       turbo: '',
<       exaust: '',
<       torqueSinceTheLatestModification: 45,
<       torque: 34,
<       driveType: '',
<       trim: '',
<       airFilter: '',
<       publishedDate: '',
<       highPerformanceTuningCompany: '',
<       intercooler: '',
<       inSideColor: 'gray',
<       co2: 120,
<       euroNorme: 'Eruro 5',
<       firstHand: true,
<       outSideColor: 'red',
<       fuelEconomySinceTheLatestModification: '',
<       fuelEconomy: '',
<       mileageSince1stModification: null,
<       fiscalHorsePower: 43,
<       horsePowerSinceTheLatestModification: 45,
<       horsePower: 567,
<       reinforcedCluth: false,
<       numberOfDoor: 3,
<       gearbox: 'manuelle',
<       maxSpeed: 450,
<       images: [{
<         id: 2,
<         path: 'https://www.automobile-propre.com/wp-content/uploads/2020/01/sony-vision-s-01.jpg'
<       }]
<     },{
<       id: 4,
<       price: 600,
<       stage: 2,
<        make : 'BMW',
<       model : 'X5',
<       year: '2005',
<       mileage: 14000,
<       category: 'break',
<       energy: 'essence',
<       localisation: 'paris',
<       numberOfSeats: 4,
<       options: '',
<       dumpValve: '',
<       airAdmission: '',
<       turbo: '',
<       exaust: '',
<       torqueSinceTheLatestModification: 45,
<       torque: 34,
<       driveType: '',
<       trim: '',
<       airFilter: '',
<       publishedDate: '',
<       highPerformanceTuningCompany: '',
<       intercooler: '',
<       inSideColor: 'gray',
<       co2: 120,
<       euroNorme: 'Eruro 5',
<       firstHand: true,
<       outSideColor: 'red',
<       fuelEconomySinceTheLatestModification: '',
<       fuelEconomy: '',
<       mileageSince1stModification: null,
<       fiscalHorsePower: 43,
<       horsePowerSinceTheLatestModification: 45,
<       horsePower: 567,
<       reinforcedCluth: false,
<       numberOfDoor: 3,
<       gearbox: 'manuelle',
<       maxSpeed: 450,
<       images: [{
<         id: 3,
<         path: 'https://www.automobile-propre.com/wp-content/uploads/2020/01/sony-vision-s-01.jpg'
<       }]
<     }
<   ]; */
<   energies: Object = [];
<   makes: Object = [];
<   models: Object = [];
<   categories: Object = [];
<   images: Image[] = [];
< 
<   constructor(private httpClient: HttpClient, private route: Router, private authStorageService: AuthStorageService) {
<     this.getMakes();
<     this.getCategories();
<     this.getEnergies();
<   }
< 
<   public getAnnonces(){
<     this.httpClient.get<Annonce[]>(GlobalConfig.getAnnoncesApiUrl).subscribe(value => {
<       this.annonces = value;
<     }, error => {
<       console.dir(error);
<     });
<   }
< 
<   public saveAnnonce(annonce: FormGroup) {
<     this.httpClient
<       .post(GlobalConfig.saveAnnonceApiUrl, annonce).subscribe(
<         (res: Response) => {
<           console.log('Enregistrement terminé !');
<           // TODO
<          // if (res.ok)
<           this.images = [];
<           this.route.navigate(['/offres'])
<         },
<         (error) => {
<           console.log("erreur to save a annonce")
<           console.dir(error);
<         }
<       );
<   }
< 
<   public getUserAnnonces() {
<     this.httpClient.get<Annonce[]>(GlobalConfig.getUserAnnoncesApiUrl).subscribe(value => {
<       this.annonces = value;
<     }, error => {
<       console.dir(error);
<     });
<   }
< 
<   public deleteAnnonce(selected_annonce: Annonce){
<     this.httpClient.put<Annonce[]>(GlobalConfig.deleteAnnonceApiUrl, selected_annonce).subscribe(value => {
<       this.annonces = value;
<     }, error => {
<       console.dir(error);
<     });
<   }
< 
<   // TODO
<   modifyAnnonce(annonce: FormGroup) {
<     this.httpClient.post(GlobalConfig.modifyAnnonceApiUrl, annonce).subscribe(
<         (res: Response) => {
<           console.log('Modification terminé !');
<           this.images = null;
<           this.route.navigate(['/gestion_annonce'])
<         },
<         (error) => {
<           console.dir(error);
<           console.log('Erreur modification ! : ' + error);
<         }
<       );
<   }
< 
<   upload(image) {
<     const uploadImage = new FormData();
<     uploadImage.append('image', image, image.name);
< 
<     this.httpClient.post<Image>(GlobalConfig.saveImageApiUrl, uploadImage)
<     .subscribe((value) => {
<       if (value != null) {
<         console.log('Image uploaded successfully');
<         //this.images[0] = "data:image/png;base64," + value.path;
< 
<         let index = this.images.length;
<         if(index == 6){
<           for (let i = 0; i < 5; i++){
<             this.images[i] = this.images[i + 1];
<           }
<           index = 5;
<         }
<         //value.path =  "data:image/png;base64," + value.path;
<         this.images[index] = value;
< 
<       } else {
<         console.log('Image not uploaded successfully');
<       }
<     });
<   }
< 
< 
<   /*
<   getImage() {
<     //Make a call to Sprinf Boot to get the Image Bytes.
<     this.httpClient.get('http://localhost:8080/api/image/')
<       .subscribe(
<         res => {
<           this.retrieveResonse = res;
<           this.base64Data = this.retrieveResonse.picByte;
<           this.retrievedImage = 'data:image/jpeg;base64,' + this.base64Data;
<         }
<       );
<   }
<   */
< 
<   // TODO
<   filter(id: any, value: any) {
< 
<     let params = new HttpParams().set("basicFilter", value);
< 
<     this.httpClient.get<Annonce[]>(GlobalConfig.getAnnonceBasicFilter, {params: params}).subscribe(response => {
<       console.log("reception ok");
<       console.dir(response);
<       this.annonces = response;
<     });
<   }
< 
< 
<   getEnergies() {
<     this.energies = [
<       {energy: 'diesel'},
<       {energy: 'SP95'},
<       {energy: 'SP98'}
<     ]
<   }
< 
<   getMakes() {
<     this.httpClient.get(GlobalConfig.getMakeListApi).subscribe(value => {
<       this.makes = value;
<     });
<   }
< 
<   getModels(make: string) {
<     let params = new HttpParams().set("make", make);
<     this.httpClient.get(GlobalConfig.getModelByMakeApi, {params: params}).subscribe(response => {
<       this.models = response;
<     });
<   }
< 
<   getCategories() {
<     this.httpClient.get(GlobalConfig.getCategoryByModelApi).subscribe(value => {
<       this.categories = value;
<     });
<   }
< 
<   showCompletDetail(id: number) {
<     this.route.navigate(["/offres/", id]);
<   }
< 
<   filterAnnonce(value: FormGroup) {
<     console.dir(value);
<     let url: string = 'make:' + value['make'] + ',model:' + value['model'] + ',category:' + value['category'] + ',price> ' + value['minPrice'] + ',price<' + value['maxPrice'];
<     console.log(url);
<     url = url.replace('null', '');
<     console.log(url);
< 
<     this.httpClient.get<Annonce[]>(GlobalConfig.getAnnonceFiltred+url).subscribe(response => {
<       console.log("reception filtred annonce OK ok");
<       console.dir(response);
<       this.annonces = response;
<     });
<   }
< }
< 
< 
< 
---
> import {Injectable} from '@angular/core';
> import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';
> import {Annonce} from './annonce';
> import {FormGroup} from '@angular/forms';
> import {GlobalConfig} from '../global-config';
> import {Router} from "@angular/router";
> import {Image} from "./image";
> import {AuthStorageService} from "./auth-storage.service";
> 
> @Injectable({
>   providedIn: 'root'
> })
> export class AnnonceService {
> 
>   annonces: Annonce[];
>   /*annonces: Annonce[] = [
>     {
>       id: 1,
>       price: 1100,
>       stage: 2,
>       make : 'BMW',
>       model : 'X5',
>       year: '2005',
>       mileage: 14000,
>       category: 'break',
>       energy: 'essence',
>       localisation: 'paris',
>       numberOfSeats: 4,
>       options: '',
>       dumpValve: '',
>       airAdmission: '',
>       turbo: '',
>       exaust: '',
>       torqueSinceTheLatestModification: 45,
>       torque: 34,
>       driveType: '',
>       trim: '',
>       airFilter: '',
>       publishedDate: '',
>       highPerformanceTuningCompany: '',
>       intercooler: '',
>       inSideColor: 'gray',
>       co2: 120,
>       euroNorme: 'Eruro 5',
>       firstHand: true,
>       outSideColor: 'red',
>       fuelEconomySinceTheLatestModification: '',
>       fuelEconomy: '',
>       mileageSince1stModification: null,
>       fiscalHorsePower: 43,
>       horsePowerSinceTheLatestModification: 45,
>       horsePower: 567,
>       reinforcedCluth: false,
>       numberOfDoor: 3,
>       gearbox: 'manuelle',
>       maxSpeed: 450,
>       images: [{
>         id: 4,
>         path: 'https://www.automobile-propre.com/wp-content/uploads/2020/01/sony-vision-s-01.jpg'
>       }]
>     },{
>       id: 2,
>       price: 400,
>       stage: 2,
>       make : 'BMW',
>       model : 'X5',
>       year: '2005',
>       mileage: 14000,
>       category: 'break',
>       energy: 'essence',
>       localisation: 'paris',
>       numberOfSeats: 4,
>       options: '',
>       dumpValve: '',
>       airAdmission: '',
>       turbo: '',
>       exaust: '',
>       torqueSinceTheLatestModification: 45,
>       torque: 34,
>       driveType: '',
>       trim: '',
>       airFilter: '',
>       publishedDate: '',
>       highPerformanceTuningCompany: '',
>       intercooler: '',
>       inSideColor: 'gray',
>       co2: 120,
>       euroNorme: 'Eruro 5',
>       firstHand: true,
>       outSideColor: 'red',
>       fuelEconomySinceTheLatestModification: '',
>       fuelEconomy: '',
>       mileageSince1stModification: null,
>       fiscalHorsePower: 43,
>       horsePowerSinceTheLatestModification: 45,
>       horsePower: 567,
>       reinforcedCluth: false,
>       numberOfDoor: 3,
>       gearbox: 'manuelle',
>       maxSpeed: 450,
>       images: [{
>         id: 1,
>         path: 'https://www.automobile-propre.com/wp-content/uploads/2020/01/sony-vision-s-01.jpg'
>       }]
>     },{
>       id: 3,
>       price: 900,
>       stage: 2,
>       make : 'BMW',
>       model : 'X5',
>       year: '2005',
>       mileage: 14000,
>       category: 'break',
>       energy: 'essence',
>       localisation: 'paris',
>       numberOfSeats: 4,
>       options: '',
>       dumpValve: '',
>       airAdmission: '',
>       turbo: '',
>       exaust: '',
>       torqueSinceTheLatestModification: 45,
>       torque: 34,
>       driveType: '',
>       trim: '',
>       airFilter: '',
>       publishedDate: '',
>       highPerformanceTuningCompany: '',
>       intercooler: '',
>       inSideColor: 'gray',
>       co2: 120,
>       euroNorme: 'Eruro 5',
>       firstHand: true,
>       outSideColor: 'red',
>       fuelEconomySinceTheLatestModification: '',
>       fuelEconomy: '',
>       mileageSince1stModification: null,
>       fiscalHorsePower: 43,
>       horsePowerSinceTheLatestModification: 45,
>       horsePower: 567,
>       reinforcedCluth: false,
>       numberOfDoor: 3,
>       gearbox: 'manuelle',
>       maxSpeed: 450,
>       images: [{
>         id: 2,
>         path: 'https://www.automobile-propre.com/wp-content/uploads/2020/01/sony-vision-s-01.jpg'
>       }]
>     },{
>       id: 4,
>       price: 600,
>       stage: 2,
>        make : 'BMW',
>       model : 'X5',
>       year: '2005',
>       mileage: 14000,
>       category: 'break',
>       energy: 'essence',
>       localisation: 'paris',
>       numberOfSeats: 4,
>       options: '',
>       dumpValve: '',
>       airAdmission: '',
>       turbo: '',
>       exaust: '',
>       torqueSinceTheLatestModification: 45,
>       torque: 34,
>       driveType: '',
>       trim: '',
>       airFilter: '',
>       publishedDate: '',
>       highPerformanceTuningCompany: '',
>       intercooler: '',
>       inSideColor: 'gray',
>       co2: 120,
>       euroNorme: 'Eruro 5',
>       firstHand: true,
>       outSideColor: 'red',
>       fuelEconomySinceTheLatestModification: '',
>       fuelEconomy: '',
>       mileageSince1stModification: null,
>       fiscalHorsePower: 43,
>       horsePowerSinceTheLatestModification: 45,
>       horsePower: 567,
>       reinforcedCluth: false,
>       numberOfDoor: 3,
>       gearbox: 'manuelle',
>       maxSpeed: 450,
>       images: [{
>         id: 3,
>         path: 'https://www.automobile-propre.com/wp-content/uploads/2020/01/sony-vision-s-01.jpg'
>       }]
>     }
>   ]; */
>   energies: Object = [];
>   makes: Object = [];
>   models: Object = [];
>   categories: Object = [];
>   images: Image[] = [];
> 
>   constructor(private httpClient: HttpClient, private route: Router, private authStorageService: AuthStorageService) {
>     this.getMakes();
>     this.getCategories();
>     this.getEnergies();
>   }
> 
>   public getAnnonces(){
>     this.httpClient.get<Annonce[]>(GlobalConfig.getAnnoncesApiUrl).subscribe(value => {
>       this.annonces = value;
>     }, error => {
>       console.dir(error);
>     });
>   }
> 
>   public saveAnnonce(annonce: FormGroup) {
>     this.httpClient
>       .post(GlobalConfig.saveAnnonceApiUrl, annonce).subscribe(
>         (res: Response) => {
>           console.log('Enregistrement terminé !');
>           // TODO
>          // if (res.ok)
>           this.images = [];
>           this.route.navigate(['/offres'])
>         },
>         (error) => {
>           console.log("erreur to save a annonce")
>           console.dir(error);
>         }
>       );
>   }
> 
>   public getUserAnnonces() {
>     this.httpClient.get<Annonce[]>(GlobalConfig.getUserAnnoncesApiUrl).subscribe(value => {
>       this.annonces = value;
>     }, error => {
>       console.dir(error);
>     });
>   }
> 
>   public deleteAnnonce(selected_annonce: Annonce){
>     this.httpClient.put<Annonce[]>(GlobalConfig.deleteAnnonceApiUrl, selected_annonce).subscribe(value => {
>       this.annonces = value;
>     }, error => {
>       console.dir(error);
>     });
>   }
> 
>   // TODO
>   modifyAnnonce(annonce: FormGroup) {
>     this.httpClient.post(GlobalConfig.modifyAnnonceApiUrl, annonce).subscribe(
>         (res: Response) => {
>           console.log('Modification terminé !');
>           this.images = null;
>           this.route.navigate(['/gestion_annonce'])
>         },
>         (error) => {
>           console.dir(error);
>           console.log('Erreur modification ! : ' + error);
>         }
>       );
>   }
> 
>   upload(image) {
>     const uploadImage = new FormData();
>     uploadImage.append('image', image, image.name);
> 
>     this.httpClient.post<Image>(GlobalConfig.saveImageApiUrl, uploadImage)
>     .subscribe((value) => {
>       if (value != null) {
>         console.log('Image uploaded successfully');
>         //this.images[0] = "data:image/png;base64," + value.path;
> 
>         let index = this.images.length;
>         if(index == 6){
>           for (let i = 0; i < 5; i++){
>             this.images[i] = this.images[i + 1];
>           }
>           index = 5;
>         }
>         //value.path =  "data:image/png;base64," + value.path;
>         this.images[index] = value;
> 
>       } else {
>         console.log('Image not uploaded successfully');
>       }
>     });
>   }
> 
> 
>   /*
>   getImage() {
>     //Make a call to Sprinf Boot to get the Image Bytes.
>     this.httpClient.get('http://localhost:8080/api/image/')
>       .subscribe(
>         res => {
>           this.retrieveResonse = res;
>           this.base64Data = this.retrieveResonse.picByte;
>           this.retrievedImage = 'data:image/jpeg;base64,' + this.base64Data;
>         }
>       );
>   }
>   */
> 
>   // TODO
>   filter(id: any, value: any) {
> 
>     let params = new HttpParams().set("basicFilter", value);
> 
>     this.httpClient.get<Annonce[]>(GlobalConfig.getAnnonceBasicFilter, {params: params}).subscribe(response => {
>       console.log("reception ok");
>       console.dir(response);
>       this.annonces = response;
>     });
>   }
> 
> 
>   getEnergies() {
>     this.energies = [
>       {energy: 'diesel'},
>       {energy: 'SP95'},
>       {energy: 'SP98'}
>     ]
>   }
> 
>   getMakes() {
>     this.httpClient.get(GlobalConfig.getMakeListApi).subscribe(value => {
>       this.makes = value;
>     });
>   }
> 
>   getModels(make: string) {
>     let params = new HttpParams().set("make", make);
>     this.httpClient.get(GlobalConfig.getModelByMakeApi, {params: params}).subscribe(response => {
>       this.models = response;
>     });
>   }
> 
>   getCategories() {
>     this.httpClient.get(GlobalConfig.getCategoryByModelApi).subscribe(value => {
>       this.categories = value;
>     });
>   }
> 
>   showCompletDetail(id: number) {
>     this.route.navigate(["/offres/", id]);
>   }
> 
>   filterAnnonce(value: FormGroup) {
>     console.dir(value);
>     let url: string = 'make:' + value['make'] + ',model:' + value['model'] + ',category:' + value['category'] + ',price> ' + value['minPrice'] + ',price<' + value['maxPrice'];
>     console.log(url);
>     url = url.replace('null', '');
>     console.log(url);
> 
>     this.httpClient.get<Annonce[]>(GlobalConfig.getAnnonceFiltred+url).subscribe(response => {
>       console.log("reception filtred annonce OK ok");
>       console.dir(response);
>       this.annonces = response;
>     });
>   }
> }
> 
> 
> 
diff -r ./src/app/Annonce/annonce.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/annonce.spec.ts
1,7c1,7
< import { Annonce } from './annonce';
< 
< describe('Annonce', () => {
<   it('should create an instance', () => {
<     expect(new Annonce()).toBeTruthy();
<   });
< });
---
> import { Annonce } from './annonce';
> 
> describe('Annonce', () => {
>   it('should create an instance', () => {
>     expect(new Annonce()).toBeTruthy();
>   });
> });
diff -r ./src/app/Annonce/annonce.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/annonce.ts
1,48c1,48
< import {Image} from './image';
< import {User} from "../user";
< 
< export class Annonce {
<     id: number = 0;
<     make: string;
<     numberOfSeats: number;
<     maxSpeed: number;
<     gearbox: string;
<     numberOfDoor: number;
<     reinforcedCluth: boolean;
<     horsePower: number;
<     horsePowerSinceTheLatestModification: number;
<     fiscalHorsePower: number;
<     price: number;
<     stage: number;
<     model: string;
<     year: string;
<     mileage: number;
<     mileageSince1stModification: number;
<     category: string;
<     energy: string;
<     fuelEconomy: string;
<     fuelEconomySinceTheLatestModification: string;
<     localisation: string;
<     outSideColor: string;
<     firstHand: boolean;
<     euroNorme: string;
<     co2: number;
<     inSideColor: string;
<     intercooler: string;
<     highPerformanceTuningCompany: string;
<     publishedDate: string;
<     trim: string;
<     driveType: string;
<     torque: number;
<     torqueSinceTheLatestModification: number;
<     exaust: string;
<     turbo: string;
<     airAdmission: string;
<     dumpValve: string;
<     airFilter: string;
<     options: string;
<     technicalControl: string;
< 
<     user: User;
<     images: Image[] = [];
< }
---
> import {Image} from './image';
> import {User} from "../user";
> 
> export class Annonce {
>     id: number = 0;
>     make: string;
>     numberOfSeats: number;
>     maxSpeed: number;
>     gearbox: string;
>     numberOfDoor: number;
>     reinforcedCluth: boolean;
>     horsePower: number;
>     horsePowerSinceTheLatestModification: number;
>     fiscalHorsePower: number;
>     price: number;
>     stage: number;
>     model: string;
>     year: string;
>     mileage: number;
>     mileageSince1stModification: number;
>     category: string;
>     energy: string;
>     fuelEconomy: string;
>     fuelEconomySinceTheLatestModification: string;
>     localisation: string;
>     outSideColor: string;
>     firstHand: boolean;
>     euroNorme: string;
>     co2: number;
>     inSideColor: string;
>     intercooler: string;
>     highPerformanceTuningCompany: string;
>     publishedDate: string;
>     trim: string;
>     driveType: string;
>     torque: number;
>     torqueSinceTheLatestModification: number;
>     exaust: string;
>     turbo: string;
>     airAdmission: string;
>     dumpValve: string;
>     airFilter: string;
>     options: string;
>     technicalControl: string;
> 
>     user: User;
>     images: Image[] = [];
> }
diff -r ./src/app/Annonce/auth-storage.service.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/auth-storage.service.spec.ts
1,16c1,16
< import { TestBed } from '@angular/core/testing';
< 
< import { AuthStorageService } from './auth-storage.service';
< 
< describe('AuthStorageService', () => {
<   let service: AuthStorageService;
< 
<   beforeEach(() => {
<     TestBed.configureTestingModule({});
<     service = TestBed.inject(AuthStorageService);
<   });
< 
<   it('should be created', () => {
<     expect(service).toBeTruthy();
<   });
< });
---
> import { TestBed } from '@angular/core/testing';
> 
> import { AuthStorageService } from './auth-storage.service';
> 
> describe('AuthStorageService', () => {
>   let service: AuthStorageService;
> 
>   beforeEach(() => {
>     TestBed.configureTestingModule({});
>     service = TestBed.inject(AuthStorageService);
>   });
> 
>   it('should be created', () => {
>     expect(service).toBeTruthy();
>   });
> });
diff -r ./src/app/Annonce/auth-storage.service.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/auth-storage.service.ts
1,47c1,47
< import { Injectable } from '@angular/core';
< import {ActivatedRoute, Router} from "@angular/router";
< 
< @Injectable({
<   providedIn: 'root'
< })
< export class AuthStorageService {
< 
<   constructor(private route: Router) { }
< 
<   token: string;
<   user: string = null;
< 
< 
<   setLoginResult(user: Object, token: string) {
<     this.user = user['username'];
<     this.token = token;
<     localStorage.setItem(this.user, token);
< 
<     this.route.navigate(['/offres']);
<   }
< 
<   logout() {
<     console.log('logout');
<     this.user = null;
<     this.token = null;
< 
<     localStorage.setItem(this.user, null);
< 
<     this.route.navigate(['/offres']);
<   }
< 
<   getAuthHeader(): {} {
<     if (this.token) {
<       return {
<         Authorization: this.token
<       };
<     } else if (this.user) {
<       return {
<         Authorization: this.user
<       };
<     } else {
<       return undefined;
<     }
<   }
< 
< }
---
> import { Injectable } from '@angular/core';
> import {ActivatedRoute, Router} from "@angular/router";
> 
> @Injectable({
>   providedIn: 'root'
> })
> export class AuthStorageService {
> 
>   constructor(private route: Router) { }
> 
>   token: string;
>   user: string = null;
> 
> 
>   setLoginResult(user: Object, token: string) {
>     this.user = user['username'];
>     this.token = token;
>     localStorage.setItem(this.user, token);
> 
>     this.route.navigate(['/offres']);
>   }
> 
>   logout() {
>     console.log('logout');
>     this.user = null;
>     this.token = null;
> 
>     localStorage.setItem(this.user, null);
> 
>     this.route.navigate(['/offres']);
>   }
> 
>   getAuthHeader(): {} {
>     if (this.token) {
>       return {
>         Authorization: this.token
>       };
>     } else if (this.user) {
>       return {
>         Authorization: this.user
>       };
>     } else {
>       return undefined;
>     }
>   }
> 
> }
diff -r ./src/app/Annonce/auth.interceptor.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/auth.interceptor.ts
1,35c1,35
< import { Injectable } from '@angular/core';
< import { Observable } from 'rxjs';
< import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';
< 
< import { AuthStorageService } from './auth-storage.service';
< 
< @Injectable({
< 	providedIn: 'root'
< })
< export class AuthInterceptor implements HttpInterceptor {
< 	constructor(private authStorage: AuthStorageService) { }
< 
< 
< 	intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
<     console.log("a http request deteceted")
< 	  if (!request || !request.url) {
<       console.log("request dont have url");
< 			return next.handle(request);
< 		}
< 
< 		console.dir(request);
< 
< 		let authHeaders = this.authStorage.getAuthHeader();
< 		console.dir(authHeaders);
< 		if (authHeaders) {
< 			console.log('AuthInterceptor .. adding authHeader for user:', this.authStorage.user);
< 			request = request.clone({
< 				setHeaders: authHeaders
< 			});
< 		} else {
< 			console.log('AuthInterceptor .. NO authHeader');
< 		}
< 		return next.handle(request);
< 	}
< }
---
> import { Injectable } from '@angular/core';
> import { Observable } from 'rxjs';
> import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';
> 
> import { AuthStorageService } from './auth-storage.service';
> 
> @Injectable({
> 	providedIn: 'root'
> })
> export class AuthInterceptor implements HttpInterceptor {
> 	constructor(private authStorage: AuthStorageService) { }
> 
> 
> 	intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
>     console.log("a http request deteceted")
> 	  if (!request || !request.url) {
>       console.log("request dont have url");
> 			return next.handle(request);
> 		}
> 
> 		console.dir(request);
> 
> 		let authHeaders = this.authStorage.getAuthHeader();
> 		console.dir(authHeaders);
> 		if (authHeaders) {
> 			console.log('AuthInterceptor .. adding authHeader for user:', this.authStorage.user);
> 			request = request.clone({
> 				setHeaders: authHeaders
> 			});
> 		} else {
> 			console.log('AuthInterceptor .. NO authHeader');
> 		}
> 		return next.handle(request);
> 	}
> }
diff -r ./src/app/Annonce/authentification.service.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/authentification.service.spec.ts
1,12c1,12
< import { TestBed } from '@angular/core/testing';
< 
< import { AuthentificationService } from './authentification.service';
< 
< describe('AuthentificationService', () => {
<   beforeEach(() => TestBed.configureTestingModule({}));
< 
<   it('should be created', () => {
<     const service: AuthentificationService = TestBed.get(AuthentificationService);
<     expect(service).toBeTruthy();
<   });
< });
---
> import { TestBed } from '@angular/core/testing';
> 
> import { AuthentificationService } from './authentification.service';
> 
> describe('AuthentificationService', () => {
>   beforeEach(() => TestBed.configureTestingModule({}));
> 
>   it('should be created', () => {
>     const service: AuthentificationService = TestBed.get(AuthentificationService);
>     expect(service).toBeTruthy();
>   });
> });
diff -r ./src/app/Annonce/authentification.service.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/authentification.service.ts
1,48c1,48
< import { Injectable } from '@angular/core';
< import {HttpClient, HttpHeaders} from '@angular/common/http';
< import {FormGroup} from '@angular/forms';
< import {GlobalConfig} from '../global-config';
< import { Router} from "@angular/router";
< import {NavbarComponent} from "../navbar/navbar.component";
< import {AuthStorageService} from "./auth-storage.service";
< 
< @Injectable({
<   providedIn: 'root'
< })
< export class AuthentificationService {
< 
<   constructor(private httpClient: HttpClient, private authStorageService: AuthStorageService) { }
< 
<   // Create user in database
<   register(registerForm: FormGroup) {
<     console.dir(registerForm.value);
<     this.httpClient.post(GlobalConfig.registerApiUrl, registerForm.value, {observe: 'response'}).subscribe(response => {
<       console.log('registered');
<       let token = response.headers.get("cache-control");
<       this.authStorageService.setLoginResult(response.body, token);
<     }, error => {
<       console.log('error to register');
<     });
<   }
< 
<   // log user after check id in database
<   login(loginForm: FormGroup) {
< 
<     let header = new HttpHeaders().set('Content-Type', 'application/json');
<     this.httpClient.post(GlobalConfig.loginApiUrl, loginForm.value, {headers: header, observe: "response", responseType: "json"}).subscribe(response => {
<       if(response != null){
<         let token = response.headers.get("cache-control");
<         this.authStorageService.setLoginResult(response.body, token);
<       }else {
<         console.log("erreur de reception de token");
<       }
<       }, error => {
<       console.dir(error);
<       console.log("erreur to log");
<     });
<   }
< 
<   logout() {
<     this.authStorageService.logout();
<   }
< }
---
> import { Injectable } from '@angular/core';
> import {HttpClient, HttpHeaders} from '@angular/common/http';
> import {FormGroup} from '@angular/forms';
> import {GlobalConfig} from '../global-config';
> import { Router} from "@angular/router";
> import {NavbarComponent} from "../navbar/navbar.component";
> import {AuthStorageService} from "./auth-storage.service";
> 
> @Injectable({
>   providedIn: 'root'
> })
> export class AuthentificationService {
> 
>   constructor(private httpClient: HttpClient, private authStorageService: AuthStorageService) { }
> 
>   // Create user in database
>   register(registerForm: FormGroup) {
>     console.dir(registerForm.value);
>     this.httpClient.post(GlobalConfig.registerApiUrl, registerForm.value, {observe: 'response'}).subscribe(response => {
>       console.log('registered');
>       let token = response.headers.get("cache-control");
>       this.authStorageService.setLoginResult(response.body, token);
>     }, error => {
>       console.log('error to register');
>     });
>   }
> 
>   // log user after check id in database
>   login(loginForm: FormGroup) {
> 
>     let header = new HttpHeaders().set('Content-Type', 'application/json');
>     this.httpClient.post(GlobalConfig.loginApiUrl, loginForm.value, {headers: header, observe: "response", responseType: "json"}).subscribe(response => {
>       if(response != null){
>         let token = response.headers.get("cache-control");
>         this.authStorageService.setLoginResult(response.body, token);
>       }else {
>         console.log("erreur de reception de token");
>       }
>       }, error => {
>       console.dir(error);
>       console.log("erreur to log");
>     });
>   }
> 
>   logout() {
>     this.authStorageService.logout();
>   }
> }
diff -r ./src/app/Annonce/image.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/image.spec.ts
1,7c1,7
< import { Image } from './image';
< 
< describe('Image', () => {
<   it('should create an instance', () => {
<     expect(new Image()).toBeTruthy();
<   });
< });
---
> import { Image } from './image';
> 
> describe('Image', () => {
>   it('should create an instance', () => {
>     expect(new Image()).toBeTruthy();
>   });
> });
diff -r ./src/app/Annonce/image.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/image.ts
1,4c1,4
< export class Image {
<   id: number;
<    path: ArrayBuffer;
< }
---
> export class Image {
>   id: number;
>    path: ArrayBuffer;
> }
diff -r ./src/app/Annonce/user.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/user.spec.ts
1,7c1,7
< import { User } from '../user';
< 
< describe('User', () => {
<   it('should create an instance', () => {
<     expect(new User()).toBeTruthy();
<   });
< });
---
> import { User } from '../user';
> 
> describe('User', () => {
>   it('should create an instance', () => {
>     expect(new User()).toBeTruthy();
>   });
> });
diff -r ./src/app/Annonce/validation-service.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/validation-service.spec.ts
1,7c1,7
< import { ValidationService } from './validation-service';
< 
< describe('ValidationService', () => {
<   it('should create an instance', () => {
<     expect(new ValidationService()).toBeTruthy();
<   });
< });
---
> import { ValidationService } from './validation-service';
> 
> describe('ValidationService', () => {
>   it('should create an instance', () => {
>     expect(new ValidationService()).toBeTruthy();
>   });
> });
diff -r ./src/app/Annonce/validation-service.ts /mnt/d/Dev/test/AutoBodyFront/src/app/Annonce/validation-service.ts
1,40c1,40
< export class ValidationService {
< 
<   static getValidatorErrorMessage(validatorName: string, validatorValue?: any) {
<     let config = {
<       required: 'Required',
<       invalidCreditCard: 'Is invalid credit card number',
<       invalidEmailAddress: 'Invalid email address',
<       invalidPassword:
<         'Invalid password. Password must be at least 6 characters long, and contain a number.',
<       minlength: `Minimum length ${validatorValue.requiredLength}`
<     };
< 
<     return config[validatorName];
<   }
< 
<   static emailValidator(control) {
<     // RFC 2822 compliant regex
<     //console.log(control.status);
<     if (
<       control.value.match(
<         /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/
<       )
<     ) {
<       return null;
<     } else {
<       return { invalidEmailAddress: true };
<     }
<   }
< 
<   static passwordValidator(control) {
<     // {6,100}           - Assert password is between 6 and 100 characters
<     // (?=.*[0-9])       - Assert a string has at least one number
<     if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {
<       return null;
<     } else {
<       return { invalidPassword: true };
<     }
<   }
< 
< }
---
> export class ValidationService {
> 
>   static getValidatorErrorMessage(validatorName: string, validatorValue?: any) {
>     let config = {
>       required: 'Required',
>       invalidCreditCard: 'Is invalid credit card number',
>       invalidEmailAddress: 'Invalid email address',
>       invalidPassword:
>         'Invalid password. Password must be at least 6 characters long, and contain a number.',
>       minlength: `Minimum length ${validatorValue.requiredLength}`
>     };
> 
>     return config[validatorName];
>   }
> 
>   static emailValidator(control) {
>     // RFC 2822 compliant regex
>     //console.log(control.status);
>     if (
>       control.value.match(
>         /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/
>       )
>     ) {
>       return null;
>     } else {
>       return { invalidEmailAddress: true };
>     }
>   }
> 
>   static passwordValidator(control) {
>     // {6,100}           - Assert password is between 6 and 100 characters
>     // (?=.*[0-9])       - Assert a string has at least one number
>     if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {
>       return null;
>     } else {
>       return { invalidPassword: true };
>     }
>   }
> 
> }
diff -r ./src/app/depot-annonces/depot-annonces.component.html /mnt/d/Dev/test/AutoBodyFront/src/app/depot-annonces/depot-annonces.component.html
1,263c1,263
< 
< <div class="row">
<   <div class="col-sm-12 col-12 col-sm-6 mb-2">
<     <h1 *ngIf="annonceId == null" >Dépôt d'annonce</h1>
<     <h1 *ngIf="annonceId != null" >Modifier l'annonce</h1>
<   </div>
< </div>
< 
< <form [formGroup]="annonceForm" (ngSubmit)="deposerAnnonce()" >
<   <div class="container">
<     <div class="row">
<       <!-- Détail voiture -->
<       <div class="col-md-6 col-sm-12 col-12">
<         <div class="form-group row">
<           <div class="col-sm-12 col-12">
<             <label>Marque</label>
<             <input type="text" class="form-control" formControlName="make" list="makes_list" (change)="activateChamp()">
<               <datalist id="makes_list">
<                 <option *ngFor="let makelist of annonceService.makes; let i = index" [value]="annonceService.makes[i].make">
<               </datalist>
<           </div>
<         </div>
<         <div class="form-group row ">
<           <div class="col-md-6 col-sm-12 col-12">
<             <label>Modèle</label>
<             <fieldset [disabled]="isMake">
<             <input type="text" class="form-control" formControlName="model" list="modeles_list" (change)="isModele = false">
<               <datalist id="modeles_list">
<                 <option *ngFor="let modelelist of annonceService.models; let m = index" [value]="annonceService.models[m].model" >
<               </datalist>
<             </fieldset>
<           </div>
<           <div class="col-md-6 col-sm-12 col-12">
<             <label>Catégorie</label>
<             <fieldset [disabled]="isModele">
<               <input type="text" class="form-control" formControlName="category" list="categories_list" (change)="isCategory = false">
<               <datalist id="categories_list">
<                 <option *ngFor="let categorylist of annonceService.categories; let c = index" [value]="annonceService.categories[c].category" >
<               </datalist>
<             </fieldset>
< 
<           </div>
<         </div>
< 
< 
< 
<         <fieldset [disabled]="isCategory">
< 
<           <div class="form-group row ">
<             <div class="col-12">
<               <label>Version / finition</label>
<               <input type="text" class="form-control" formControlName="trim">
<             </div>
<           </div>
<         <div class="form-group row ">
<           <div class="col-md-6 col-sm-12 col-12">
<             <label>Année</label>
<             <input type="number" class="form-control" formControlName="year" [max]="2020">
<           </div>
< 
<           <div class="col-md-6 col-sm-12 col-12">
<             <label>Energie</label>
<             <input type="text" class="form-control" formControlName="energy" list="energies_list">
<             <datalist id="energies_list">
<               <option *ngFor="let energie of annonceService.energies; let i = index" [value]="annonceService.energies[i].energy">
<             </datalist>
<          </div>
<       </div>
< 
<           <div class="form-group row ">
<           <div class="col-md-6 col-sm-12 col-12">
<             <label>Consommation</label>
<             <input type="text" class="form-control" formControlName="fuelEconomy" [max]="2020">
<           </div>
< 
<           <div class="col-md-6 col-sm-12 col-12">
<             <label>Consommation depuis reprogrammation</label>
<             <input type="text " class="form-control" formControlName="fuelEconomySinceTheLatestModification">
<          </div>
<       </div>
< 
<         <div class="form-group row ">
<           <div class="col-md-3 col-6">
<             <label>Nb place</label>
<             <input type="number" class="form-control" formControlName="numberOfSeats" [max]="7">
<           </div>
<           <div class="col-md-3 col-6">
<             <label>Nb porte</label>
<             <input type="number" class="form-control" formControlName="numberOfDoor" [max]="7">
<           </div>
<           <div class="col-md-3 col-6">
<             <label>CH</label>
<             <input type="number" class="form-control" formControlName="horsePower">
<           </div>
<           <div class="col-md-3 col-6">
<             <label>CV</label>
<             <input type="number" class="form-control" formControlName="fiscalHorsePower">
<           </div>
<         </div>
< 
<         <div class="form-group row ">
<           <div class="col-md-6 col-sm-12 col-12">
<             <label>Date d'immatriculation</label>
<             <input type="date" class="form-control" formControlName="year">
<           </div>
<           <div class="col-md-3 col-sm-12 col-12">
<             <label>Norme Euro</label>
<             <select class="form-control" formControlName="euroNorme">
<               <option value="euro1">Euro 1</option>
<               <option value="euro2">Euro 2</option>
<               <option value="euro3">Euro 3</option>
<               <option value="euro4">Euro 4</option>
<               <option value="euro5">Euro 5</option>
<               <option value="euro6b">Euro 6b</option>
<               <option value="euro6c">Euro 6c</option>
<             </select>
<           </div>
< 
<           <div class="col-md-3 col-sm-12 col-12">
<             <label>CO2</label>
<             <input type="number" class="form-control" formControlName="co2">
<           </div>
<         </div>
< 
< 
<         <div class="form-group row ">
<           <div class="col-md-6 col-sm-12 col-12">
<             <label>Kilométrage</label>
<             <input type="number" class="form-control" formControlName="mileage">
<           </div>
<           <div class="col-md-6 col-sm-12 col-12">
<           <label>Prix</label>
<           <input type="number" class="form-control" formControlName="price">
<         </div>
<         </div>
< 
<         <div class="form-group row ">
<           <div class="col-md-6 col-sm-12 col-12">
<             <label>Couleur intérieure</label>
<             <input type="text" class="form-control" formControlName="inSideColor">
<           </div>
<           <div class="col-md-6 col-sm-12 col-12">
<           <label>Couleur extérieure</label>
<           <input type="text" class="form-control" formControlName="outSideColor">
<           </div>
<         </div>
< 
<         <div class="form-group row ">
<           <div class="col-md-6 col-sm-12 col-12">
<             <label>Localisation</label>
<             <input type="text" class="form-control" formControlName="localisation">
<           </div>
<           <div class="col-md-3 col-sm-12 col-12">
<             <label>C/moteur</label>
<             <input type="number" class="form-control" formControlName="driveType">
<           </div>
<           <div class="col-md-3 col-sm-12 col-12">
<             <label>Stage</label>
<             <input type="number"  class="form-control" formControlName="stage" [min]="0" [max]="3">
<           </div>
< 
<         </div>
< 
< 
< 
<         <div class="form-group row ">
<           <div class="form-check col-md-6 col-sm-12 col-12">
<             <input type="checkbox" class="form-check-input" formControlName="firstHand" id="firstHand">
<             <label class="form-check-label"  for="firstHand">Premier main déclaratif </label>
<           </div>
<           <div class="form-check col-md-6 col-sm-12 col-12">
<             <input type="checkbox" class="form-check-input" formControlName="reinforcedCluth" id="reinforcedCluth">
<             <label class="form-check-label"  for="reinforcedCluth">Embrayage renforcé</label>
<           </div>
<           <div class="form-check col-md-6 col-sm-12 col-12">
<             <input type="checkbox" class="form-check-input" formControlName="technicalControl" id="technicalControl">
<             <label class="form-check-label"  for="technicalControl">Control techinque requis</label>
<           </div>
<         </div>
< 
<         <div class="form-group row ">
<           <div class="col-sm-12 col-12">
<             <label>Description (Options, Information complémentaire) </label>
<             <textarea class="form-control" formControlName="options" maxlength="2000"></textarea>
<           </div>
<         </div>
< 
< 
< 
<         </fieldset>
<       </div>
< 
< <!--      Upload Image-->
<       <div class="col-md-6 col-sm-12 col-12">
< 
<         <div class="row mb-2">
<           <div class="col-md-4 col-sm-12 col-12 image-upload border pt-2 pb-2" *ngFor="let i of [0,1,2]">
<               <div class="image-preview mb-3" *ngIf="annonceService.images[i]">
<                 <img [src]="'data:image/png;base64,'+annonceService.images[i].path" class="upload-image" />
<               </div>
< 
<               <i *ngIf="!annonceService.images[i]">
<                 <i class="material-icons">add_a_photo</i>
<               </i>
<               <input type="file" (change)="uploadImage($event)" multiple />
< 
<           </div>
<         </div>
< 
<         <div class="row mb-4">
< 
<           <div class="col-md-4 col-sm-12 col-12 image-upload border pt-2 pb-2" *ngFor="let i of [3,4,5]">
<             <div class="image-preview mb-3" *ngIf="annonceService.images[i]">
<               <img [src]="'data:image/png;base64,'+annonceService.images[i].path" class="upload-image" />
<             </div>
< 
<             <i *ngIf="!annonceService.images[i]">
<               <i class="material-icons">add_a_photo</i>
<             </i>
<             <input type="file" (change)="uploadImage($event)" multiple />
<           </div>
< 
<         </div>
< 
<         <div class="row">
< 
<           <div>
<             Les factures <br>
<             Les fichiers joignables *
<           </div>
< 
<           <div class="col-md-12 col-sm-12 col-12">
<             <div class="input-group mb-3">
<               <div class="custom-file">
<                 <input type="file" class="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01" (change)="uploadFichier($event)" accept="application/pdf">
<                 <label class="custom-file-label" for="inputGroupFile01">Charger un fichier</label>
<               </div>
<             </div>
<           </div>
< 
< 
<           <div class="col-sm-12 col-12">
<             <label class="col-sm-12 col-12" *ngFor="let pj of attachements">{{pj.name}}</label>
<           </div>
< 
< 
<           <div class="border mt-3">Les fichiers possible : <br>entreien, changement des melement, factures des materiel </div>
<           <!-- les fichiers chargés -->
<         </div>
< 
<       </div>
< 
<       <div class="col-12">
<         <div class="form-group">
<           <button *ngIf="annonceId != null" class="btn btn-primary form-control col-md-6 col-12" type="submit">Modifier</button>
<           <button *ngIf="annonceId == null" class="btn btn-primary form-control col-md-6 col-12" type="submit">Déposer</button>
<         </div>
<       </div>
< 
<     </div>
<   </div>
< 
< </form>
---
> 
> <div class="row">
>   <div class="col-sm-12 col-12 col-sm-6 mb-2">
>     <h1 *ngIf="annonceId == null" >Dépôt d'annonce</h1>
>     <h1 *ngIf="annonceId != null" >Modifier l'annonce</h1>
>   </div>
> </div>
> 
> <form [formGroup]="annonceForm" (ngSubmit)="deposerAnnonce()" >
>   <div class="container">
>     <div class="row">
>       <!-- Détail voiture -->
>       <div class="col-md-6 col-sm-12 col-12">
>         <div class="form-group row">
>           <div class="col-sm-12 col-12">
>             <label>Marque</label>
>             <input type="text" class="form-control" formControlName="make" list="makes_list" (change)="activateChamp()">
>               <datalist id="makes_list">
>                 <option *ngFor="let makelist of annonceService.makes; let i = index" [value]="annonceService.makes[i].make">
>               </datalist>
>           </div>
>         </div>
>         <div class="form-group row ">
>           <div class="col-md-6 col-sm-12 col-12">
>             <label>Modèle</label>
>             <fieldset [disabled]="isMake">
>             <input type="text" class="form-control" formControlName="model" list="modeles_list" (change)="isModele = false">
>               <datalist id="modeles_list">
>                 <option *ngFor="let modelelist of annonceService.models; let m = index" [value]="annonceService.models[m].model" >
>               </datalist>
>             </fieldset>
>           </div>
>           <div class="col-md-6 col-sm-12 col-12">
>             <label>Catégorie</label>
>             <fieldset [disabled]="isModele">
>               <input type="text" class="form-control" formControlName="category" list="categories_list" (change)="isCategory = false">
>               <datalist id="categories_list">
>                 <option *ngFor="let categorylist of annonceService.categories; let c = index" [value]="annonceService.categories[c].category" >
>               </datalist>
>             </fieldset>
> 
>           </div>
>         </div>
> 
> 
> 
>         <fieldset [disabled]="isCategory">
> 
>           <div class="form-group row ">
>             <div class="col-12">
>               <label>Version / finition</label>
>               <input type="text" class="form-control" formControlName="trim">
>             </div>
>           </div>
>         <div class="form-group row ">
>           <div class="col-md-6 col-sm-12 col-12">
>             <label>Année</label>
>             <input type="number" class="form-control" formControlName="year" [max]="2020">
>           </div>
> 
>           <div class="col-md-6 col-sm-12 col-12">
>             <label>Energie</label>
>             <input type="text" class="form-control" formControlName="energy" list="energies_list">
>             <datalist id="energies_list">
>               <option *ngFor="let energie of annonceService.energies; let i = index" [value]="annonceService.energies[i].energy">
>             </datalist>
>          </div>
>       </div>
> 
>           <div class="form-group row ">
>           <div class="col-md-6 col-sm-12 col-12">
>             <label>Consommation</label>
>             <input type="text" class="form-control" formControlName="fuelEconomy" [max]="2020">
>           </div>
> 
>           <div class="col-md-6 col-sm-12 col-12">
>             <label>Consommation depuis reprogrammation</label>
>             <input type="text " class="form-control" formControlName="fuelEconomySinceTheLatestModification">
>          </div>
>       </div>
> 
>         <div class="form-group row ">
>           <div class="col-md-3 col-6">
>             <label>Nb place</label>
>             <input type="number" class="form-control" formControlName="numberOfSeats" [max]="7">
>           </div>
>           <div class="col-md-3 col-6">
>             <label>Nb porte</label>
>             <input type="number" class="form-control" formControlName="numberOfDoor" [max]="7">
>           </div>
>           <div class="col-md-3 col-6">
>             <label>CH</label>
>             <input type="number" class="form-control" formControlName="horsePower">
>           </div>
>           <div class="col-md-3 col-6">
>             <label>CV</label>
>             <input type="number" class="form-control" formControlName="fiscalHorsePower">
>           </div>
>         </div>
> 
>         <div class="form-group row ">
>           <div class="col-md-6 col-sm-12 col-12">
>             <label>Date d'immatriculation</label>
>             <input type="date" class="form-control" formControlName="year">
>           </div>
>           <div class="col-md-3 col-sm-12 col-12">
>             <label>Norme Euro</label>
>             <select class="form-control" formControlName="euroNorme">
>               <option value="euro1">Euro 1</option>
>               <option value="euro2">Euro 2</option>
>               <option value="euro3">Euro 3</option>
>               <option value="euro4">Euro 4</option>
>               <option value="euro5">Euro 5</option>
>               <option value="euro6b">Euro 6b</option>
>               <option value="euro6c">Euro 6c</option>
>             </select>
>           </div>
> 
>           <div class="col-md-3 col-sm-12 col-12">
>             <label>CO2</label>
>             <input type="number" class="form-control" formControlName="co2">
>           </div>
>         </div>
> 
> 
>         <div class="form-group row ">
>           <div class="col-md-6 col-sm-12 col-12">
>             <label>Kilométrage</label>
>             <input type="number" class="form-control" formControlName="mileage">
>           </div>
>           <div class="col-md-6 col-sm-12 col-12">
>           <label>Prix</label>
>           <input type="number" class="form-control" formControlName="price">
>         </div>
>         </div>
> 
>         <div class="form-group row ">
>           <div class="col-md-6 col-sm-12 col-12">
>             <label>Couleur intérieure</label>
>             <input type="text" class="form-control" formControlName="inSideColor">
>           </div>
>           <div class="col-md-6 col-sm-12 col-12">
>           <label>Couleur extérieure</label>
>           <input type="text" class="form-control" formControlName="outSideColor">
>           </div>
>         </div>
> 
>         <div class="form-group row ">
>           <div class="col-md-6 col-sm-12 col-12">
>             <label>Localisation</label>
>             <input type="text" class="form-control" formControlName="localisation">
>           </div>
>           <div class="col-md-3 col-sm-12 col-12">
>             <label>C/moteur</label>
>             <input type="number" class="form-control" formControlName="driveType">
>           </div>
>           <div class="col-md-3 col-sm-12 col-12">
>             <label>Stage</label>
>             <input type="number"  class="form-control" formControlName="stage" [min]="0" [max]="3">
>           </div>
> 
>         </div>
> 
> 
> 
>         <div class="form-group row ">
>           <div class="form-check col-md-6 col-sm-12 col-12">
>             <input type="checkbox" class="form-check-input" formControlName="firstHand" id="firstHand">
>             <label class="form-check-label"  for="firstHand">Premier main déclaratif </label>
>           </div>
>           <div class="form-check col-md-6 col-sm-12 col-12">
>             <input type="checkbox" class="form-check-input" formControlName="reinforcedCluth" id="reinforcedCluth">
>             <label class="form-check-label"  for="reinforcedCluth">Embrayage renforcé</label>
>           </div>
>           <div class="form-check col-md-6 col-sm-12 col-12">
>             <input type="checkbox" class="form-check-input" formControlName="technicalControl" id="technicalControl">
>             <label class="form-check-label"  for="technicalControl">Control techinque requis</label>
>           </div>
>         </div>
> 
>         <div class="form-group row ">
>           <div class="col-sm-12 col-12">
>             <label>Description (Options, Information complémentaire) </label>
>             <textarea class="form-control" formControlName="options" maxlength="2000"></textarea>
>           </div>
>         </div>
> 
> 
> 
>         </fieldset>
>       </div>
> 
> <!--      Upload Image-->
>       <div class="col-md-6 col-sm-12 col-12">
> 
>         <div class="row mb-2">
>           <div class="col-md-4 col-sm-12 col-12 image-upload border pt-2 pb-2" *ngFor="let i of [0,1,2]">
>               <div class="image-preview mb-3" *ngIf="annonceService.images[i]">
>                 <img [src]="'data:image/png;base64,'+annonceService.images[i].path" class="upload-image" />
>               </div>
> 
>               <i *ngIf="!annonceService.images[i]">
>                 <i class="material-icons">add_a_photo</i>
>               </i>
>               <input type="file" (change)="uploadImage($event)" multiple />
> 
>           </div>
>         </div>
> 
>         <div class="row mb-4">
> 
>           <div class="col-md-4 col-sm-12 col-12 image-upload border pt-2 pb-2" *ngFor="let i of [3,4,5]">
>             <div class="image-preview mb-3" *ngIf="annonceService.images[i]">
>               <img [src]="'data:image/png;base64,'+annonceService.images[i].path" class="upload-image" />
>             </div>
> 
>             <i *ngIf="!annonceService.images[i]">
>               <i class="material-icons">add_a_photo</i>
>             </i>
>             <input type="file" (change)="uploadImage($event)" multiple />
>           </div>
> 
>         </div>
> 
>         <div class="row">
> 
>           <div>
>             Les factures <br>
>             Les fichiers joignables *
>           </div>
> 
>           <div class="col-md-12 col-sm-12 col-12">
>             <div class="input-group mb-3">
>               <div class="custom-file">
>                 <input type="file" class="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01" (change)="uploadFichier($event)" accept="application/pdf">
>                 <label class="custom-file-label" for="inputGroupFile01">Charger un fichier</label>
>               </div>
>             </div>
>           </div>
> 
> 
>           <div class="col-sm-12 col-12">
>             <label class="col-sm-12 col-12" *ngFor="let pj of attachements">{{pj.name}}</label>
>           </div>
> 
> 
>           <div class="border mt-3">Les fichiers possible : <br>entreien, changement des melement, factures des materiel </div>
>           <!-- les fichiers chargés -->
>         </div>
> 
>       </div>
> 
>       <div class="col-12">
>         <div class="form-group">
>           <button *ngIf="annonceId != null" class="btn btn-primary form-control col-md-6 col-12" type="submit">Modifier</button>
>           <button *ngIf="annonceId == null" class="btn btn-primary form-control col-md-6 col-12" type="submit">Déposer</button>
>         </div>
>       </div>
> 
>     </div>
>   </div>
> 
> </form>
diff -r ./src/app/depot-annonces/depot-annonces.component.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/depot-annonces/depot-annonces.component.spec.ts
1,25c1,25
< import { async, ComponentFixture, TestBed } from '@angular/core/testing';
< 
< import { DepotAnnoncesComponent } from './depot-annonces.component';
< 
< describe('DepotAnnoncesComponent', () => {
<   let component: DepotAnnoncesComponent;
<   let fixture: ComponentFixture<DepotAnnoncesComponent>;
< 
<   beforeEach(async(() => {
<     TestBed.configureTestingModule({
<       declarations: [ DepotAnnoncesComponent ]
<     })
<     .compileComponents();
<   }));
< 
<   beforeEach(() => {
<     fixture = TestBed.createComponent(DepotAnnoncesComponent);
<     component = fixture.componentInstance;
<     fixture.detectChanges();
<   });
< 
<   it('should create', () => {
<     expect(component).toBeTruthy();
<   });
< });
---
> import { async, ComponentFixture, TestBed } from '@angular/core/testing';
> 
> import { DepotAnnoncesComponent } from './depot-annonces.component';
> 
> describe('DepotAnnoncesComponent', () => {
>   let component: DepotAnnoncesComponent;
>   let fixture: ComponentFixture<DepotAnnoncesComponent>;
> 
>   beforeEach(async(() => {
>     TestBed.configureTestingModule({
>       declarations: [ DepotAnnoncesComponent ]
>     })
>     .compileComponents();
>   }));
> 
>   beforeEach(() => {
>     fixture = TestBed.createComponent(DepotAnnoncesComponent);
>     component = fixture.componentInstance;
>     fixture.detectChanges();
>   });
> 
>   it('should create', () => {
>     expect(component).toBeTruthy();
>   });
> });
diff -r ./src/app/depot-annonces/depot-annonces.component.ts /mnt/d/Dev/test/AutoBodyFront/src/app/depot-annonces/depot-annonces.component.ts
1,116c1,116
< import {ChangeDetectorRef, Component, OnInit} from '@angular/core';
< import {FormBuilder, FormGroup, Validators} from '@angular/forms';
< import {AnnonceService} from '../Annonce/annonce.service';
< import {Annonce} from "../Annonce/annonce";
< import {ActivatedRoute} from "@angular/router";
< 
< @Component({
<   selector: 'app-depot-annonces',
<   templateUrl: './depot-annonces.component.html',
<   styleUrls: ['./depot-annonces.component.scss']
< })
< export class DepotAnnoncesComponent implements OnInit {
< 
<   annonce: Annonce = null;
<   annonceId = null;
<   annonceForm: FormGroup;
<   isMake = true;
<   isModele = true;
<   isCategory = true;
<   attachements = [];
< 
<   // Reader read uploaded file
<   reader = new FileReader();
< 
<   // images: string | ArrayBuffer;
<   constructor(private formBuilder: FormBuilder, private annonceService: AnnonceService, private cd: ChangeDetectorRef, private route: ActivatedRoute) {
<   }
< 
<   ngOnInit() {
<     this.annonce = new Annonce();
<     this.annonceId = this.route.snapshot.params['id'];
<     if(this.annonceId != null){
<         this.annonce = this.annonceService.annonces[this.annonceId];
<         this.annonceService.images = this.annonce.images;
<         this.isMake = this.isModele = this.isCategory = false;
<     }
< 
<     this.annonceForm = this.formBuilder.group({
<       id: [this.annonce.id],
<       make: [this.annonce.make],
<       numberOfSeats: [this.annonce.numberOfSeats],
<       maxSpeed: [this.annonce.maxSpeed],
<       gearbox: [this.annonce.gearbox],
<       numberOfDoor: [this.annonce.numberOfDoor],
<       reinforcedCluth: [this.annonce.reinforcedCluth],
<       horsePower: [this.annonce.horsePower],
<       horsePowerSinceTheLatestModification: [this.annonce.horsePowerSinceTheLatestModification],
<       fiscalHorsePower: [this.annonce.fiscalHorsePower],
<       price: [this.annonce.price],
<       stage: [this.annonce.stage],
<       model: [this.annonce.model],
<       year: [this.annonce.year],
<       mileage: [this.annonce.mileage],
<       mileageSince1stModification: [this.annonce.mileageSince1stModification],
<       category: [this.annonce.category],
<       energy: [this.annonce.energy],
<       fuelEconomy: [this.annonce.fuelEconomy],
<       fuelEconomySinceTheLatestModification: [this.annonce.fuelEconomySinceTheLatestModification],
<       localisation: [this.annonce.localisation],
<       outSideColor: [this.annonce.outSideColor],
<       firstHand: [this.annonce.firstHand],
<       euroNorme: [this.annonce.euroNorme],
<       co2: [this.annonce.co2],
<       inSideColor : [this.annonce.inSideColor],
<       intercooler: [this.annonce.intercooler],
<       highPerformanceTuningCompany: [this.annonce.highPerformanceTuningCompany],
<       publishedDate: [this.annonce.publishedDate],
<       trim: [this.annonce.trim],
<       driveType: [this.annonce.driveType],
<       torque: [this.annonce.torque],
<       torqueSinceTheLatestModification: [this.annonce.torqueSinceTheLatestModification],
<       exaust: [this.annonce.exaust],
<       turbo: [this.annonce.turbo],
<       airAdmission: [this.annonce.airAdmission],
<       dumpValve: [this.annonce.dumpValve],
<       airFilter: [this.annonce.airFilter],
<       options: [this.annonce.options],
<       technicalControl: [this.annonce.technicalControl],
<       images: [this.annonce.images]
<     });
<   }
< 
<   uploadFichier(event) {
<     if(event.target.files) {
<       const [file] = event.target.files;
<       this.reader.readAsDataURL(file);
< 
<       let uploadStat: any = this.annonceService.upload(file);
< 
<       if(!uploadStat) {
<         let index = this.attachements.length;
< 
<         this.attachements[index] = {name : file.name};
<       }
<     }
<   }
< 
<   uploadImage(event) {
<     if (event.target.files && event.target.files.length) {
<       const [file] = event.target.files;
<       this.annonceService.upload(file);
<     }
<   }
< 
<   deposerAnnonce() {
<     this.annonceForm.patchValue({images: this.annonceService.images});
<     this.annonceService.saveAnnonce(this.annonceForm.value);
<   }
< 
<   activateChamp() {
<       this.annonceService.getModels(this.annonceForm.value.make);
<       this.isMake = false;
<   }
< 
< 
< }
---
> import {ChangeDetectorRef, Component, OnInit} from '@angular/core';
> import {FormBuilder, FormGroup, Validators} from '@angular/forms';
> import {AnnonceService} from '../Annonce/annonce.service';
> import {Annonce} from "../Annonce/annonce";
> import {ActivatedRoute} from "@angular/router";
> 
> @Component({
>   selector: 'app-depot-annonces',
>   templateUrl: './depot-annonces.component.html',
>   styleUrls: ['./depot-annonces.component.scss']
> })
> export class DepotAnnoncesComponent implements OnInit {
> 
>   annonce: Annonce = null;
>   annonceId = null;
>   annonceForm: FormGroup;
>   isMake = true;
>   isModele = true;
>   isCategory = true;
>   attachements = [];
> 
>   // Reader read uploaded file
>   reader = new FileReader();
> 
>   // images: string | ArrayBuffer;
>   constructor(private formBuilder: FormBuilder, private annonceService: AnnonceService, private cd: ChangeDetectorRef, private route: ActivatedRoute) {
>   }
> 
>   ngOnInit() {
>     this.annonce = new Annonce();
>     this.annonceId = this.route.snapshot.params['id'];
>     if(this.annonceId != null){
>         this.annonce = this.annonceService.annonces[this.annonceId];
>         this.annonceService.images = this.annonce.images;
>         this.isMake = this.isModele = this.isCategory = false;
>     }
> 
>     this.annonceForm = this.formBuilder.group({
>       id: [this.annonce.id],
>       make: [this.annonce.make],
>       numberOfSeats: [this.annonce.numberOfSeats],
>       maxSpeed: [this.annonce.maxSpeed],
>       gearbox: [this.annonce.gearbox],
>       numberOfDoor: [this.annonce.numberOfDoor],
>       reinforcedCluth: [this.annonce.reinforcedCluth],
>       horsePower: [this.annonce.horsePower],
>       horsePowerSinceTheLatestModification: [this.annonce.horsePowerSinceTheLatestModification],
>       fiscalHorsePower: [this.annonce.fiscalHorsePower],
>       price: [this.annonce.price],
>       stage: [this.annonce.stage],
>       model: [this.annonce.model],
>       year: [this.annonce.year],
>       mileage: [this.annonce.mileage],
>       mileageSince1stModification: [this.annonce.mileageSince1stModification],
>       category: [this.annonce.category],
>       energy: [this.annonce.energy],
>       fuelEconomy: [this.annonce.fuelEconomy],
>       fuelEconomySinceTheLatestModification: [this.annonce.fuelEconomySinceTheLatestModification],
>       localisation: [this.annonce.localisation],
>       outSideColor: [this.annonce.outSideColor],
>       firstHand: [this.annonce.firstHand],
>       euroNorme: [this.annonce.euroNorme],
>       co2: [this.annonce.co2],
>       inSideColor : [this.annonce.inSideColor],
>       intercooler: [this.annonce.intercooler],
>       highPerformanceTuningCompany: [this.annonce.highPerformanceTuningCompany],
>       publishedDate: [this.annonce.publishedDate],
>       trim: [this.annonce.trim],
>       driveType: [this.annonce.driveType],
>       torque: [this.annonce.torque],
>       torqueSinceTheLatestModification: [this.annonce.torqueSinceTheLatestModification],
>       exaust: [this.annonce.exaust],
>       turbo: [this.annonce.turbo],
>       airAdmission: [this.annonce.airAdmission],
>       dumpValve: [this.annonce.dumpValve],
>       airFilter: [this.annonce.airFilter],
>       options: [this.annonce.options],
>       technicalControl: [this.annonce.technicalControl],
>       images: [this.annonce.images]
>     });
>   }
> 
>   uploadFichier(event) {
>     if(event.target.files) {
>       const [file] = event.target.files;
>       this.reader.readAsDataURL(file);
> 
>       let uploadStat: any = this.annonceService.upload(file);
> 
>       if(!uploadStat) {
>         let index = this.attachements.length;
> 
>         this.attachements[index] = {name : file.name};
>       }
>     }
>   }
> 
>   uploadImage(event) {
>     if (event.target.files && event.target.files.length) {
>       const [file] = event.target.files;
>       this.annonceService.upload(file);
>     }
>   }
> 
>   deposerAnnonce() {
>     this.annonceForm.patchValue({images: this.annonceService.images});
>     this.annonceService.saveAnnonce(this.annonceForm.value);
>   }
> 
>   activateChamp() {
>       this.annonceService.getModels(this.annonceForm.value.make);
>       this.isMake = false;
>   }
> 
> 
> }
diff -r ./src/app/gestion-annonces/gestion-annonces.component.html /mnt/d/Dev/test/AutoBodyFront/src/app/gestion-annonces/gestion-annonces.component.html
1,53c1,53
< <div class="container">
<   <h1>Gestion des annonces</h1>
< 
<   <div *ngFor="let annonce of annonceService.annonces; let index = index">
<     <div class='row border' style="margin-bottom: 20px">
<       <div class="col-md-2">
<         <img *ngIf="annonce.images[0]" src="data:image/png;base64,{{annonce.images[0].path}}" alt="" width="100%" height="100%">
<         <img *ngIf="!annonce.images[0]" src="https://www.labaleine.fr/sites/default/files/image-not-found.jpg" width="100%" height="100%">
< 
<       </div>
<       <div class="col-md-3">
<         <p>Marque : {{annonce.make}}</p>
<         <p>Modèle : {{annonce.model}}</p>
<         <p>Immatriculé : {{annonce.year}}</p>
< 
<       </div>
<       <div class="col-md-2">
<         <p>Stage : {{annonce.stage}}</p>
<         <p class="text-justify-right"><strong>{{annonce.price}} € </strong> </p>
<       </div>
< 
<       <div class="col-md-2">
<         <button class="form-control btn btn-link" (click)="offreDetail(index)" >Voir Détail</button>
<       </div>
<       <div class="col-md-2">
<         <button class="form-control btn-danger" (click)="supprimer(content, annonce)" [value]="index">Supprimer</button>
<         <button class="form-control btn-primary" (click)="modifier(index)">Modifier</button>
<       </div>
<     </div>
< 
<   </div>
< </div>
< 
< <ng-template #content let-modal>
<   <div class="modal-header">
<     <h3>Comfirmation</h3>
<     <button type="button" class="close" aria-label="Close" (click)="modal.dismiss()">
<       <span aria-hidden="true">&times;</span>
<     </button>
<   </div>
<   <div class="modal-body">
<     <form>
<       <div class="form-group">
<         <label>Souhaitez-vous vraiment supprimer votre annonce ?</label>
<       </div>
<     </form>
<   </div>
<   <div class="modal-footer">
<     <button type="button" class="btn btn-danger" (click)="confirmSuppression()" >Supprimer</button>
<     <button type="button" class="btn btn-outline-dark" (click)="modal.close()">Annuler</button>
<   </div>
< </ng-template>
< 
---
> <div class="container">
>   <h1>Gestion des annonces</h1>
> 
>   <div *ngFor="let annonce of annonceService.annonces; let index = index">
>     <div class='row border' style="margin-bottom: 20px">
>       <div class="col-md-2">
>         <img *ngIf="annonce.images[0]" src="data:image/png;base64,{{annonce.images[0].path}}" alt="" width="100%" height="100%">
>         <img *ngIf="!annonce.images[0]" src="https://www.labaleine.fr/sites/default/files/image-not-found.jpg" width="100%" height="100%">
> 
>       </div>
>       <div class="col-md-3">
>         <p>Marque : {{annonce.make}}</p>
>         <p>Modèle : {{annonce.model}}</p>
>         <p>Immatriculé : {{annonce.year}}</p>
> 
>       </div>
>       <div class="col-md-2">
>         <p>Stage : {{annonce.stage}}</p>
>         <p class="text-justify-right"><strong>{{annonce.price}} € </strong> </p>
>       </div>
> 
>       <div class="col-md-2">
>         <button class="form-control btn btn-link" (click)="offreDetail(index)" >Voir Détail</button>
>       </div>
>       <div class="col-md-2">
>         <button class="form-control btn-danger" (click)="supprimer(content, annonce)" [value]="index">Supprimer</button>
>         <button class="form-control btn-primary" (click)="modifier(index)">Modifier</button>
>       </div>
>     </div>
> 
>   </div>
> </div>
> 
> <ng-template #content let-modal>
>   <div class="modal-header">
>     <h3>Comfirmation</h3>
>     <button type="button" class="close" aria-label="Close" (click)="modal.dismiss()">
>       <span aria-hidden="true">&times;</span>
>     </button>
>   </div>
>   <div class="modal-body">
>     <form>
>       <div class="form-group">
>         <label>Souhaitez-vous vraiment supprimer votre annonce ?</label>
>       </div>
>     </form>
>   </div>
>   <div class="modal-footer">
>     <button type="button" class="btn btn-danger" (click)="confirmSuppression()" >Supprimer</button>
>     <button type="button" class="btn btn-outline-dark" (click)="modal.close()">Annuler</button>
>   </div>
> </ng-template>
> 
diff -r ./src/app/gestion-annonces/gestion-annonces.component.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/gestion-annonces/gestion-annonces.component.spec.ts
1,25c1,25
< import { async, ComponentFixture, TestBed } from '@angular/core/testing';
< 
< import { GestionAnnoncesComponent } from './gestion-annonces.component';
< 
< describe('GestionAnnoncesComponent', () => {
<   let component: GestionAnnoncesComponent;
<   let fixture: ComponentFixture<GestionAnnoncesComponent>;
< 
<   beforeEach(async(() => {
<     TestBed.configureTestingModule({
<       declarations: [ GestionAnnoncesComponent ]
<     })
<     .compileComponents();
<   }));
< 
<   beforeEach(() => {
<     fixture = TestBed.createComponent(GestionAnnoncesComponent);
<     component = fixture.componentInstance;
<     fixture.detectChanges();
<   });
< 
<   it('should create', () => {
<     expect(component).toBeTruthy();
<   });
< });
---
> import { async, ComponentFixture, TestBed } from '@angular/core/testing';
> 
> import { GestionAnnoncesComponent } from './gestion-annonces.component';
> 
> describe('GestionAnnoncesComponent', () => {
>   let component: GestionAnnoncesComponent;
>   let fixture: ComponentFixture<GestionAnnoncesComponent>;
> 
>   beforeEach(async(() => {
>     TestBed.configureTestingModule({
>       declarations: [ GestionAnnoncesComponent ]
>     })
>     .compileComponents();
>   }));
> 
>   beforeEach(() => {
>     fixture = TestBed.createComponent(GestionAnnoncesComponent);
>     component = fixture.componentInstance;
>     fixture.detectChanges();
>   });
> 
>   it('should create', () => {
>     expect(component).toBeTruthy();
>   });
> });
diff -r ./src/app/global-config.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/global-config.spec.ts
1,7c1,7
< import { GlobalConfig } from './global-config';
< 
< describe('GlobalConfig', () => {
<   it('should create an instance', () => {
<     expect(new GlobalConfig()).toBeTruthy();
<   });
< });
---
> import { GlobalConfig } from './global-config';
> 
> describe('GlobalConfig', () => {
>   it('should create an instance', () => {
>     expect(new GlobalConfig()).toBeTruthy();
>   });
> });
diff -r ./src/app/log-form/log-form.component.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/log-form/log-form.component.spec.ts
1,25c1,25
< import { async, ComponentFixture, TestBed } from '@angular/core/testing';
< 
< import { LogFormComponent } from './log-form.component';
< 
< describe('LogFormComponent', () => {
<   let component: LogFormComponent;
<   let fixture: ComponentFixture<LogFormComponent>;
< 
<   beforeEach(async(() => {
<     TestBed.configureTestingModule({
<       declarations: [ LogFormComponent ]
<     })
<     .compileComponents();
<   }));
< 
<   beforeEach(() => {
<     fixture = TestBed.createComponent(LogFormComponent);
<     component = fixture.componentInstance;
<     fixture.detectChanges();
<   });
< 
<   it('should create', () => {
<     expect(component).toBeTruthy();
<   });
< });
---
> import { async, ComponentFixture, TestBed } from '@angular/core/testing';
> 
> import { LogFormComponent } from './log-form.component';
> 
> describe('LogFormComponent', () => {
>   let component: LogFormComponent;
>   let fixture: ComponentFixture<LogFormComponent>;
> 
>   beforeEach(async(() => {
>     TestBed.configureTestingModule({
>       declarations: [ LogFormComponent ]
>     })
>     .compileComponents();
>   }));
> 
>   beforeEach(() => {
>     fixture = TestBed.createComponent(LogFormComponent);
>     component = fixture.componentInstance;
>     fixture.detectChanges();
>   });
> 
>   it('should create', () => {
>     expect(component).toBeTruthy();
>   });
> });
diff -r ./src/app/modal.service.spec.ts /mnt/d/Dev/test/AutoBodyFront/src/app/modal.service.spec.ts
1,16c1,16
< import { TestBed } from '@angular/core/testing';
< 
< import { ModalService } from './modal.service';
< 
< describe('ModalService', () => {
<   let service: ModalService;
< 
<   beforeEach(() => {
<     TestBed.configureTestingModule({});
<     service = TestBed.inject(ModalService);
<   });
< 
<   it('should be created', () => {
<     expect(service).toBeTruthy();
<   });
< });
---
> import { TestBed } from '@angular/core/testing';
> 
> import { ModalService } from './modal.service';
> 
> describe('ModalService', () => {
>   let service: ModalService;
> 
>   beforeEach(() => {
>     TestBed.configureTestingModule({});
>     service = TestBed.inject(ModalService);
>   });
> 
>   it('should be created', () => {
>     expect(service).toBeTruthy();
>   });
> });
diff -r ./src/app/modal.service.ts /mnt/d/Dev/test/AutoBodyFront/src/app/modal.service.ts
1,34c1,34
< import { Injectable } from '@angular/core';
< import {ModalDismissReasons, NgbModal} from "@ng-bootstrap/ng-bootstrap";
< 
< @Injectable({
<   providedIn: 'root'
< })
< export class ModalService {
< 
<   closeResult = '';
<   constructor(private modal: NgbModal) { }
< 
<   open(content){
<     this.modal.open(content, {ariaLabelledBy: 'modal-basic-title'}).result.then((result) => {
<       this.closeResult = `Closed with: ${result}`;
<     }, (reason) => {
<       this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;
<     });
<   }
< 
<   close(){
<     this.modal.dismissAll();
<   }
< 
<   private getDismissReason(reason: any): string {
<     if (reason === ModalDismissReasons.ESC) {
<       return 'by pressing ESC';
<     } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {
<       return 'by clicking on a backdrop';
<     } else {
<       return `with: ${reason}`;
<     }
<   }
< 
< }
---
> import { Injectable } from '@angular/core';
> import {ModalDismissReasons, NgbModal} from "@ng-bootstrap/ng-bootstrap";
> 
> @Injectable({
>   providedIn: 'root'
> })
> export class ModalService {
> 
>   closeResult = '';
>   constructor(private modal: NgbModal) { }
> 
>   open(content){
>     this.modal.open(content, {ariaLabelledBy: 'modal-basic-title'}).result.then((result) => {
>       this.closeResult = `Closed with: ${result}`;
>     }, (reason) => {
>       this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;
>     });
>   }
> 
>   close(){
>     this.modal.dismissAll();
>   }
> 
>   private getDismissReason(reason: any): string {
>     if (reason === ModalDismissReasons.ESC) {
>       return 'by pressing ESC';
>     } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {
>       return 'by clicking on a backdrop';
>     } else {
>       return `with: ${reason}`;
>     }
>   }
> 
> }
diff -r ./src/app/user.ts /mnt/d/Dev/test/AutoBodyFront/src/app/user.ts
1,9c1,9
< export class User {
< 
<   id: number = 0;
<   username: string;
<   password: string;
<   mail: string;
<   role: string;
<   stat: string;
< }
---
> export class User {
> 
>   id: number = 0;
>   username: string;
>   password: string;
>   mail: string;
>   role: string;
>   stat: string;
> }
diff -r ./src/polyfills.ts /mnt/d/Dev/test/AutoBodyFront/src/polyfills.ts
1,4c1,4
< /***************************************************************************************************
<  * Load `$localize` onto the global scope - used if i18n tags appear in Angular templates.
<  */
< import '@angular/localize/init';
---
> /***************************************************************************************************
>  * Load `$localize` onto the global scope - used if i18n tags appear in Angular templates.
>  */
> import '@angular/localize/init';
